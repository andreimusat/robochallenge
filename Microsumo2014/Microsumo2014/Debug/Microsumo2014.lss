
Microsumo2014.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000496  0000052a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000496  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000052a  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  0000052c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000c8f  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000b0  00000000  00000000  00000cbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000d6c  00000000  00000000  00000d6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000028f  00000000  00000000  00001ada  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000483  00000000  00000000  00001d69  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000158  00000000  00000000  000021ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000001b2  00000000  00000000  00002344  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000858  00000000  00000000  000024f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000090  00000000  00000000  00002d4e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 3a 02 	call	0x474	; 0x474 <main>
  88:	0c 94 49 02 	jmp	0x492	; 0x492 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <set_right_motor>:
 */ 

#include "helper.h"

void set_right_motor(int type, int speed){
	switch(type){
  90:	81 30       	cpi	r24, 0x01	; 1
  92:	91 05       	cpc	r25, r1
  94:	29 f0       	breq	.+10     	; 0xa0 <set_right_motor+0x10>
  96:	02 97       	sbiw	r24, 0x02	; 2
  98:	31 f4       	brne	.+12     	; 0xa6 <set_right_motor+0x16>
		case BACK:
			OCR0A = speed;
  9a:	67 bd       	out	0x27, r22	; 39
			OCR0B  = 0;
  9c:	18 bc       	out	0x28, r1	; 40
		break;
  9e:	08 95       	ret
		
		case FRONT:
			OCR0A = 0;
  a0:	17 bc       	out	0x27, r1	; 39
			OCR0B  = speed;
  a2:	68 bd       	out	0x28, r22	; 40
		
		break;
  a4:	08 95       	ret
		
		default:
		
			OCR0A = 0;
  a6:	17 bc       	out	0x27, r1	; 39
			OCR0B  = 0;
  a8:	18 bc       	out	0x28, r1	; 40
  aa:	08 95       	ret

000000ac <set_left_motor>:
		break;
	}
}
void set_left_motor(int type, int speed){
	switch(type){
  ac:	81 30       	cpi	r24, 0x01	; 1
  ae:	91 05       	cpc	r25, r1
  b0:	69 f0       	breq	.+26     	; 0xcc <set_left_motor+0x20>
  b2:	02 97       	sbiw	r24, 0x02	; 2
  b4:	b1 f4       	brne	.+44     	; 0xe2 <set_left_motor+0x36>
		case BACK:
		
			OCR1A = speed;
  b6:	86 2f       	mov	r24, r22
  b8:	97 2f       	mov	r25, r23
  ba:	90 93 89 00 	sts	0x0089, r25
  be:	80 93 88 00 	sts	0x0088, r24
			OCR1B = 0;
  c2:	10 92 8b 00 	sts	0x008B, r1
  c6:	10 92 8a 00 	sts	0x008A, r1
		break;
  ca:	08 95       	ret
		
		case FRONT:
		
			OCR1A = 0;
  cc:	10 92 89 00 	sts	0x0089, r1
  d0:	10 92 88 00 	sts	0x0088, r1
			OCR1B = speed;
  d4:	86 2f       	mov	r24, r22
  d6:	97 2f       	mov	r25, r23
  d8:	90 93 8b 00 	sts	0x008B, r25
  dc:	80 93 8a 00 	sts	0x008A, r24
		break;
  e0:	08 95       	ret
		
		default:
			OCR1A = 0;
  e2:	10 92 89 00 	sts	0x0089, r1
  e6:	10 92 88 00 	sts	0x0088, r1
			OCR1B = 0;
  ea:	10 92 8b 00 	sts	0x008B, r1
  ee:	10 92 8a 00 	sts	0x008A, r1
  f2:	08 95       	ret

000000f4 <left>:
		
		break;
	}
}

void left(int speed){
  f4:	cf 93       	push	r28
  f6:	df 93       	push	r29
  f8:	ec 01       	movw	r28, r24
	set_right_motor(FRONT,speed);
  fa:	bc 01       	movw	r22, r24
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	0e 94 48 00 	call	0x90	; 0x90 <set_right_motor>
	set_left_motor(BACK,speed);
 104:	be 01       	movw	r22, r28
 106:	82 e0       	ldi	r24, 0x02	; 2
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	0e 94 56 00 	call	0xac	; 0xac <set_left_motor>
}
 10e:	df 91       	pop	r29
 110:	cf 91       	pop	r28
 112:	08 95       	ret

00000114 <front>:

void front(int speed){
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
 118:	ec 01       	movw	r28, r24
	set_right_motor(FRONT,speed);
 11a:	bc 01       	movw	r22, r24
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	0e 94 48 00 	call	0x90	; 0x90 <set_right_motor>
	set_left_motor(FRONT,speed);
 124:	be 01       	movw	r22, r28
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	0e 94 56 00 	call	0xac	; 0xac <set_left_motor>
}
 12e:	df 91       	pop	r29
 130:	cf 91       	pop	r28
 132:	08 95       	ret

00000134 <back>:

void back(int speed){
 134:	cf 93       	push	r28
 136:	df 93       	push	r29
 138:	ec 01       	movw	r28, r24
	
	set_right_motor(BACK,speed);
 13a:	bc 01       	movw	r22, r24
 13c:	82 e0       	ldi	r24, 0x02	; 2
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	0e 94 48 00 	call	0x90	; 0x90 <set_right_motor>
	set_left_motor(BACK,speed);
 144:	be 01       	movw	r22, r28
 146:	82 e0       	ldi	r24, 0x02	; 2
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 56 00 	call	0xac	; 0xac <set_left_motor>
}
 14e:	df 91       	pop	r29
 150:	cf 91       	pop	r28
 152:	08 95       	ret

00000154 <right>:


void right(int speed){
 154:	cf 93       	push	r28
 156:	df 93       	push	r29
 158:	ec 01       	movw	r28, r24
	set_right_motor(BACK,speed);
 15a:	bc 01       	movw	r22, r24
 15c:	82 e0       	ldi	r24, 0x02	; 2
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	0e 94 48 00 	call	0x90	; 0x90 <set_right_motor>
	set_left_motor(FRONT,speed);
 164:	be 01       	movw	r22, r28
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	0e 94 56 00 	call	0xac	; 0xac <set_left_motor>
}
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	08 95       	ret

00000174 <stop>:

void stop(){
	set_left_motor(STOP,0);
 174:	60 e0       	ldi	r22, 0x00	; 0
 176:	70 e0       	ldi	r23, 0x00	; 0
 178:	80 e0       	ldi	r24, 0x00	; 0
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	0e 94 56 00 	call	0xac	; 0xac <set_left_motor>
	set_right_motor(STOP,0);
 180:	60 e0       	ldi	r22, 0x00	; 0
 182:	70 e0       	ldi	r23, 0x00	; 0
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	0e 94 48 00 	call	0x90	; 0x90 <set_right_motor>
 18c:	08 95       	ret

0000018e <initTimers>:
}

void initTimers() {
	TCCR0A = (1<<COM0A1) | (1<<COM0B1) | (1 << WGM00) | (1 << WGM01);
 18e:	83 ea       	ldi	r24, 0xA3	; 163
 190:	84 bd       	out	0x24, r24	; 36
	TCCR0B =  (1<< CS02) | (1<<CS00) ;
 192:	85 e0       	ldi	r24, 0x05	; 5
 194:	85 bd       	out	0x25, r24	; 37

	TCCR1A = (1<<COM1A1) | (1<<COM1B1) | (1 << WGM10);
 196:	81 ea       	ldi	r24, 0xA1	; 161
 198:	80 93 80 00 	sts	0x0080, r24
	TCCR1B =  (1<< CS12)  | (1<<CS10) | (1<< WGM12);
 19c:	8d e0       	ldi	r24, 0x0D	; 13
 19e:	80 93 81 00 	sts	0x0081, r24
	
	OCR0A = 0;
 1a2:	17 bc       	out	0x27, r1	; 39
	OCR0B = 0;
 1a4:	18 bc       	out	0x28, r1	; 40
	OCR1A = 0;
 1a6:	10 92 89 00 	sts	0x0089, r1
 1aa:	10 92 88 00 	sts	0x0088, r1
	OCR1B = 0;
 1ae:	10 92 8b 00 	sts	0x008B, r1
 1b2:	10 92 8a 00 	sts	0x008A, r1
 1b6:	08 95       	ret

000001b8 <initMotors>:
}
void initMotors(){
	DDRD |= (1<<PD5) | (1 << PD6);
 1b8:	8a b1       	in	r24, 0x0a	; 10
 1ba:	80 66       	ori	r24, 0x60	; 96
 1bc:	8a b9       	out	0x0a, r24	; 10
	DDRB |= (1<<PB1) | (1<<PB2);
 1be:	84 b1       	in	r24, 0x04	; 4
 1c0:	86 60       	ori	r24, 0x06	; 6
 1c2:	84 b9       	out	0x04, r24	; 4
	initTimers();
 1c4:	0e 94 c7 00 	call	0x18e	; 0x18e <initTimers>
 1c8:	08 95       	ret

000001ca <initIO>:
}

void initIO() {
	DDRD &= ~((1<< DIST1) | (1<< DIST2) | (1<< DIST3) | (1<< DIST4) | (1<< DIST5));
 1ca:	8a b1       	in	r24, 0x0a	; 10
 1cc:	80 7e       	andi	r24, 0xE0	; 224
 1ce:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1<< DIST1) | (1<< DIST2) | (1<< DIST3) | (1<< DIST4) | (1<< DIST5);
 1d0:	8b b1       	in	r24, 0x0b	; 11
 1d2:	8f 61       	ori	r24, 0x1F	; 31
 1d4:	8b b9       	out	0x0b, r24	; 11
	
	DDRC &= ~((1<< LINE1) | (1<<LINE2));
 1d6:	87 b1       	in	r24, 0x07	; 7
 1d8:	8c 7f       	andi	r24, 0xFC	; 252
 1da:	87 b9       	out	0x07, r24	; 7
	PORTC |= (1<< LINE1) | (1<<LINE2);
 1dc:	88 b1       	in	r24, 0x08	; 8
 1de:	83 60       	ori	r24, 0x03	; 3
 1e0:	88 b9       	out	0x08, r24	; 8
 1e2:	08 95       	ret

000001e4 <waitForStartSignal>:
}

int waitForStartSignal() {
	if ( START_ROBO == 0 )
 1e4:	83 b1       	in	r24, 0x03	; 3
 1e6:	86 fb       	bst	r24, 6
 1e8:	88 27       	eor	r24, r24
 1ea:	80 f9       	bld	r24, 0
		return 0;
	else
		return 1;
}
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	08 95       	ret

000001f0 <kill>:

void kill() {
	if (KILL_ROBO == 0) {
 1f0:	1f 99       	sbic	0x03, 7	; 3
 1f2:	03 c0       	rjmp	.+6      	; 0x1fa <kill+0xa>
		while (1) {
			stop();
 1f4:	0e 94 ba 00 	call	0x174	; 0x174 <stop>
 1f8:	fd cf       	rjmp	.-6      	; 0x1f4 <kill+0x4>
 1fa:	08 95       	ret

000001fc <line>:
}


void line() {
	
	front(SPEED_LOW);
 1fc:	81 e1       	ldi	r24, 0x11	; 17
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	0e 94 8a 00 	call	0x114	; 0x114 <front>
	
	
	if(RIGHT_LINE == 0) {
 204:	31 99       	sbic	0x06, 1	; 6
 206:	1a c0       	rjmp	.+52     	; 0x23c <line+0x40>
		back(SPEED_MAX);
 208:	8f ef       	ldi	r24, 0xFF	; 255
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	0e 94 9a 00 	call	0x134	; 0x134 <back>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 210:	2f ef       	ldi	r18, 0xFF	; 255
 212:	80 e7       	ldi	r24, 0x70	; 112
 214:	92 e0       	ldi	r25, 0x02	; 2
 216:	21 50       	subi	r18, 0x01	; 1
 218:	80 40       	sbci	r24, 0x00	; 0
 21a:	90 40       	sbci	r25, 0x00	; 0
 21c:	e1 f7       	brne	.-8      	; 0x216 <line+0x1a>
 21e:	00 c0       	rjmp	.+0      	; 0x220 <line+0x24>
 220:	00 00       	nop
		_delay_ms(100);
		left(SPEED_MED);
 222:	8c e3       	ldi	r24, 0x3C	; 60
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	0e 94 7a 00 	call	0xf4	; 0xf4 <left>
 22a:	2f ef       	ldi	r18, 0xFF	; 255
 22c:	80 e7       	ldi	r24, 0x70	; 112
 22e:	92 e0       	ldi	r25, 0x02	; 2
 230:	21 50       	subi	r18, 0x01	; 1
 232:	80 40       	sbci	r24, 0x00	; 0
 234:	90 40       	sbci	r25, 0x00	; 0
 236:	e1 f7       	brne	.-8      	; 0x230 <line+0x34>
 238:	00 c0       	rjmp	.+0      	; 0x23a <line+0x3e>
 23a:	00 00       	nop
		_delay_ms(100);
	} 
	if(LEFT_LINE == 0) {
 23c:	30 99       	sbic	0x06, 0	; 6
 23e:	1a c0       	rjmp	.+52     	; 0x274 <line+0x78>
		back(SPEED_MAX);
 240:	8f ef       	ldi	r24, 0xFF	; 255
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	0e 94 9a 00 	call	0x134	; 0x134 <back>
 248:	2f ef       	ldi	r18, 0xFF	; 255
 24a:	80 e7       	ldi	r24, 0x70	; 112
 24c:	92 e0       	ldi	r25, 0x02	; 2
 24e:	21 50       	subi	r18, 0x01	; 1
 250:	80 40       	sbci	r24, 0x00	; 0
 252:	90 40       	sbci	r25, 0x00	; 0
 254:	e1 f7       	brne	.-8      	; 0x24e <line+0x52>
 256:	00 c0       	rjmp	.+0      	; 0x258 <line+0x5c>
 258:	00 00       	nop
		_delay_ms(100);
		right(SPEED_MED);
 25a:	8c e3       	ldi	r24, 0x3C	; 60
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	0e 94 aa 00 	call	0x154	; 0x154 <right>
 262:	2f ef       	ldi	r18, 0xFF	; 255
 264:	80 e7       	ldi	r24, 0x70	; 112
 266:	92 e0       	ldi	r25, 0x02	; 2
 268:	21 50       	subi	r18, 0x01	; 1
 26a:	80 40       	sbci	r24, 0x00	; 0
 26c:	90 40       	sbci	r25, 0x00	; 0
 26e:	e1 f7       	brne	.-8      	; 0x268 <line+0x6c>
 270:	00 c0       	rjmp	.+0      	; 0x272 <line+0x76>
 272:	00 00       	nop
 274:	08 95       	ret

00000276 <lineFront>:
	
}

void lineFront() {
	
	if(RIGHT_LINE == 0) {
 276:	31 99       	sbic	0x06, 1	; 6
 278:	1a c0       	rjmp	.+52     	; 0x2ae <lineFront+0x38>
		back(SPEED_MAX); //Back full speeed ?
 27a:	8f ef       	ldi	r24, 0xFF	; 255
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	0e 94 9a 00 	call	0x134	; 0x134 <back>
 282:	2f ef       	ldi	r18, 0xFF	; 255
 284:	80 e7       	ldi	r24, 0x70	; 112
 286:	92 e0       	ldi	r25, 0x02	; 2
 288:	21 50       	subi	r18, 0x01	; 1
 28a:	80 40       	sbci	r24, 0x00	; 0
 28c:	90 40       	sbci	r25, 0x00	; 0
 28e:	e1 f7       	brne	.-8      	; 0x288 <lineFront+0x12>
 290:	00 c0       	rjmp	.+0      	; 0x292 <lineFront+0x1c>
 292:	00 00       	nop
		_delay_ms(100);
		left(SPEED_MED);
 294:	8c e3       	ldi	r24, 0x3C	; 60
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	0e 94 7a 00 	call	0xf4	; 0xf4 <left>
 29c:	2f ef       	ldi	r18, 0xFF	; 255
 29e:	80 e7       	ldi	r24, 0x70	; 112
 2a0:	92 e0       	ldi	r25, 0x02	; 2
 2a2:	21 50       	subi	r18, 0x01	; 1
 2a4:	80 40       	sbci	r24, 0x00	; 0
 2a6:	90 40       	sbci	r25, 0x00	; 0
 2a8:	e1 f7       	brne	.-8      	; 0x2a2 <lineFront+0x2c>
 2aa:	00 c0       	rjmp	.+0      	; 0x2ac <lineFront+0x36>
 2ac:	00 00       	nop
		_delay_ms(100);
	}
	if(LEFT_LINE == 0) {
 2ae:	30 99       	sbic	0x06, 0	; 6
 2b0:	1a c0       	rjmp	.+52     	; 0x2e6 <lineFront+0x70>
		back(SPEED_MAX);
 2b2:	8f ef       	ldi	r24, 0xFF	; 255
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	0e 94 9a 00 	call	0x134	; 0x134 <back>
 2ba:	2f ef       	ldi	r18, 0xFF	; 255
 2bc:	80 e7       	ldi	r24, 0x70	; 112
 2be:	92 e0       	ldi	r25, 0x02	; 2
 2c0:	21 50       	subi	r18, 0x01	; 1
 2c2:	80 40       	sbci	r24, 0x00	; 0
 2c4:	90 40       	sbci	r25, 0x00	; 0
 2c6:	e1 f7       	brne	.-8      	; 0x2c0 <lineFront+0x4a>
 2c8:	00 c0       	rjmp	.+0      	; 0x2ca <lineFront+0x54>
 2ca:	00 00       	nop
		_delay_ms(100);
		right(SPEED_MED);
 2cc:	8c e3       	ldi	r24, 0x3C	; 60
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	0e 94 aa 00 	call	0x154	; 0x154 <right>
 2d4:	2f ef       	ldi	r18, 0xFF	; 255
 2d6:	80 e7       	ldi	r24, 0x70	; 112
 2d8:	92 e0       	ldi	r25, 0x02	; 2
 2da:	21 50       	subi	r18, 0x01	; 1
 2dc:	80 40       	sbci	r24, 0x00	; 0
 2de:	90 40       	sbci	r25, 0x00	; 0
 2e0:	e1 f7       	brne	.-8      	; 0x2da <lineFront+0x64>
 2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <lineFront+0x6e>
 2e4:	00 00       	nop
 2e6:	08 95       	ret

000002e8 <dist>:

int flag = 0;

void dist(){
	
	if( FRONT_SENSOR == 0 ) {
 2e8:	4b 99       	sbic	0x09, 3	; 9
 2ea:	32 c0       	rjmp	.+100    	; 0x350 <dist+0x68>
		
		if ( FRONT_LEFT == 0 ) {
 2ec:	49 99       	sbic	0x09, 1	; 9
 2ee:	0b c0       	rjmp	.+22     	; 0x306 <dist+0x1e>
			left(SPEED_MED);
 2f0:	8c e3       	ldi	r24, 0x3C	; 60
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	0e 94 7a 00 	call	0xf4	; 0xf4 <left>
 2f8:	8f e1       	ldi	r24, 0x1F	; 31
 2fa:	9e e4       	ldi	r25, 0x4E	; 78
 2fc:	01 97       	sbiw	r24, 0x01	; 1
 2fe:	f1 f7       	brne	.-4      	; 0x2fc <dist+0x14>
 300:	00 c0       	rjmp	.+0      	; 0x302 <dist+0x1a>
 302:	00 00       	nop
 304:	0c c0       	rjmp	.+24     	; 0x31e <dist+0x36>
			_delay_ms(10);
		} else if ( FRONT_RIGHT == 0 ) {
 306:	4a 99       	sbic	0x09, 2	; 9
 308:	0a c0       	rjmp	.+20     	; 0x31e <dist+0x36>
			right(SPEED_MED);
 30a:	8c e3       	ldi	r24, 0x3C	; 60
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	0e 94 aa 00 	call	0x154	; 0x154 <right>
 312:	8f e1       	ldi	r24, 0x1F	; 31
 314:	9e e4       	ldi	r25, 0x4E	; 78
 316:	01 97       	sbiw	r24, 0x01	; 1
 318:	f1 f7       	brne	.-4      	; 0x316 <dist+0x2e>
 31a:	00 c0       	rjmp	.+0      	; 0x31c <dist+0x34>
 31c:	00 00       	nop
			_delay_ms(10);
		}
		
		flag = 1;
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	90 93 01 01 	sts	0x0101, r25
 326:	80 93 00 01 	sts	0x0100, r24
		front(SPEED_MAX);
 32a:	8f ef       	ldi	r24, 0xFF	; 255
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	0e 94 8a 00 	call	0x114	; 0x114 <front>
 332:	8f e1       	ldi	r24, 0x1F	; 31
 334:	9e e4       	ldi	r25, 0x4E	; 78
 336:	01 97       	sbiw	r24, 0x01	; 1
 338:	f1 f7       	brne	.-4      	; 0x336 <dist+0x4e>
 33a:	00 c0       	rjmp	.+0      	; 0x33c <dist+0x54>
 33c:	00 00       	nop
		_delay_ms(10);
		lineFront();
 33e:	0e 94 3b 01 	call	0x276	; 0x276 <lineFront>
 342:	8f e1       	ldi	r24, 0x1F	; 31
 344:	9e e4       	ldi	r25, 0x4E	; 78
 346:	01 97       	sbiw	r24, 0x01	; 1
 348:	f1 f7       	brne	.-4      	; 0x346 <dist+0x5e>
 34a:	00 c0       	rjmp	.+0      	; 0x34c <dist+0x64>
 34c:	00 00       	nop
 34e:	08 95       	ret
		_delay_ms(10);
		return;
	}
	
	if(flag)
 350:	80 91 00 01 	lds	r24, 0x0100
 354:	90 91 01 01 	lds	r25, 0x0101
 358:	89 2b       	or	r24, r25
 35a:	29 f0       	breq	.+10     	; 0x366 <dist+0x7e>
	{
		flag = 0;
 35c:	10 92 01 01 	sts	0x0101, r1
 360:	10 92 00 01 	sts	0x0100, r1
		//back(SPEED_MED2);
		//_delay_ms(100);
		return;
 364:	08 95       	ret
	}
	
		if( FRONT_LEFT == 0 ) {
 366:	49 99       	sbic	0x09, 1	; 9
 368:	26 c0       	rjmp	.+76     	; 0x3b6 <dist+0xce>
			if( FRONT_RIGHT == 0 ) {
 36a:	4a 99       	sbic	0x09, 2	; 9
 36c:	19 c0       	rjmp	.+50     	; 0x3a0 <dist+0xb8>
				flag = 1;
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	90 93 01 01 	sts	0x0101, r25
 376:	80 93 00 01 	sts	0x0100, r24
				front(SPEED_MAX);
 37a:	8f ef       	ldi	r24, 0xFF	; 255
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	0e 94 8a 00 	call	0x114	; 0x114 <front>
 382:	8f e1       	ldi	r24, 0x1F	; 31
 384:	9e e4       	ldi	r25, 0x4E	; 78
 386:	01 97       	sbiw	r24, 0x01	; 1
 388:	f1 f7       	brne	.-4      	; 0x386 <dist+0x9e>
 38a:	00 c0       	rjmp	.+0      	; 0x38c <dist+0xa4>
 38c:	00 00       	nop
				_delay_ms(10);
				lineFront();
 38e:	0e 94 3b 01 	call	0x276	; 0x276 <lineFront>
 392:	8f e1       	ldi	r24, 0x1F	; 31
 394:	9e e4       	ldi	r25, 0x4E	; 78
 396:	01 97       	sbiw	r24, 0x01	; 1
 398:	f1 f7       	brne	.-4      	; 0x396 <dist+0xae>
 39a:	00 c0       	rjmp	.+0      	; 0x39c <dist+0xb4>
 39c:	00 00       	nop
 39e:	08 95       	ret
				_delay_ms(10);
				return;
			}			
			left(SPEED_MED);
 3a0:	8c e3       	ldi	r24, 0x3C	; 60
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	0e 94 7a 00 	call	0xf4	; 0xf4 <left>
 3a8:	8f e1       	ldi	r24, 0x1F	; 31
 3aa:	9e e4       	ldi	r25, 0x4E	; 78
 3ac:	01 97       	sbiw	r24, 0x01	; 1
 3ae:	f1 f7       	brne	.-4      	; 0x3ac <dist+0xc4>
 3b0:	00 c0       	rjmp	.+0      	; 0x3b2 <dist+0xca>
 3b2:	00 00       	nop
 3b4:	08 95       	ret
			_delay_ms(10);
			return;
		}

		if( FRONT_RIGHT == 0 ) {
 3b6:	4a 99       	sbic	0x09, 2	; 9
 3b8:	26 c0       	rjmp	.+76     	; 0x406 <dist+0x11e>
			
			if( FRONT_LEFT == 0 ) {
 3ba:	49 99       	sbic	0x09, 1	; 9
 3bc:	19 c0       	rjmp	.+50     	; 0x3f0 <dist+0x108>
				flag = 1;
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	90 93 01 01 	sts	0x0101, r25
 3c6:	80 93 00 01 	sts	0x0100, r24
				front(SPEED_MAX);
 3ca:	8f ef       	ldi	r24, 0xFF	; 255
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	0e 94 8a 00 	call	0x114	; 0x114 <front>
 3d2:	8f e1       	ldi	r24, 0x1F	; 31
 3d4:	9e e4       	ldi	r25, 0x4E	; 78
 3d6:	01 97       	sbiw	r24, 0x01	; 1
 3d8:	f1 f7       	brne	.-4      	; 0x3d6 <dist+0xee>
 3da:	00 c0       	rjmp	.+0      	; 0x3dc <dist+0xf4>
 3dc:	00 00       	nop
				_delay_ms(10);
				lineFront();
 3de:	0e 94 3b 01 	call	0x276	; 0x276 <lineFront>
 3e2:	8f e1       	ldi	r24, 0x1F	; 31
 3e4:	9e e4       	ldi	r25, 0x4E	; 78
 3e6:	01 97       	sbiw	r24, 0x01	; 1
 3e8:	f1 f7       	brne	.-4      	; 0x3e6 <dist+0xfe>
 3ea:	00 c0       	rjmp	.+0      	; 0x3ec <dist+0x104>
 3ec:	00 00       	nop
 3ee:	08 95       	ret
				_delay_ms(10);
				return;
			}
			
			right(SPEED_MED);
 3f0:	8c e3       	ldi	r24, 0x3C	; 60
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	0e 94 aa 00 	call	0x154	; 0x154 <right>
 3f8:	8f e1       	ldi	r24, 0x1F	; 31
 3fa:	9e e4       	ldi	r25, 0x4E	; 78
 3fc:	01 97       	sbiw	r24, 0x01	; 1
 3fe:	f1 f7       	brne	.-4      	; 0x3fc <dist+0x114>
 400:	00 c0       	rjmp	.+0      	; 0x402 <dist+0x11a>
 402:	00 00       	nop
 404:	08 95       	ret
			_delay_ms(10);
			return;
		}
	
	if( FRONT_LEFT == 0 ) {
 406:	49 99       	sbic	0x09, 1	; 9
 408:	0b c0       	rjmp	.+22     	; 0x420 <dist+0x138>
		left(SPEED_MED);
 40a:	8c e3       	ldi	r24, 0x3C	; 60
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	0e 94 7a 00 	call	0xf4	; 0xf4 <left>
 412:	8f e1       	ldi	r24, 0x1F	; 31
 414:	9e e4       	ldi	r25, 0x4E	; 78
 416:	01 97       	sbiw	r24, 0x01	; 1
 418:	f1 f7       	brne	.-4      	; 0x416 <dist+0x12e>
 41a:	00 c0       	rjmp	.+0      	; 0x41c <dist+0x134>
 41c:	00 00       	nop
 41e:	08 95       	ret
		_delay_ms(10);
		return;
	}

	if( FRONT_RIGHT == 0 ) {
 420:	4a 99       	sbic	0x09, 2	; 9
 422:	0b c0       	rjmp	.+22     	; 0x43a <dist+0x152>
		
		right(SPEED_MED);
 424:	8c e3       	ldi	r24, 0x3C	; 60
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	0e 94 aa 00 	call	0x154	; 0x154 <right>
 42c:	8f e1       	ldi	r24, 0x1F	; 31
 42e:	9e e4       	ldi	r25, 0x4E	; 78
 430:	01 97       	sbiw	r24, 0x01	; 1
 432:	f1 f7       	brne	.-4      	; 0x430 <dist+0x148>
 434:	00 c0       	rjmp	.+0      	; 0x436 <dist+0x14e>
 436:	00 00       	nop
 438:	08 95       	ret
		_delay_ms(10);
		return;
	}
	
	if( BACK_LEFT == 0 ) {	
 43a:	48 99       	sbic	0x09, 0	; 9
 43c:	0b c0       	rjmp	.+22     	; 0x454 <dist+0x16c>
		left(SPEED_MED);
 43e:	8c e3       	ldi	r24, 0x3C	; 60
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	0e 94 7a 00 	call	0xf4	; 0xf4 <left>
 446:	8f e4       	ldi	r24, 0x4F	; 79
 448:	93 ec       	ldi	r25, 0xC3	; 195
 44a:	01 97       	sbiw	r24, 0x01	; 1
 44c:	f1 f7       	brne	.-4      	; 0x44a <dist+0x162>
 44e:	00 c0       	rjmp	.+0      	; 0x450 <dist+0x168>
 450:	00 00       	nop
 452:	08 95       	ret
		_delay_ms(25);
		return;
	}
	if( BACK_RIGHT == 0 ) {
 454:	4c 99       	sbic	0x09, 4	; 9
 456:	0b c0       	rjmp	.+22     	; 0x46e <dist+0x186>
		
		right(SPEED_MED);
 458:	8c e3       	ldi	r24, 0x3C	; 60
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	0e 94 aa 00 	call	0x154	; 0x154 <right>
 460:	8f e4       	ldi	r24, 0x4F	; 79
 462:	93 ec       	ldi	r25, 0xC3	; 195
 464:	01 97       	sbiw	r24, 0x01	; 1
 466:	f1 f7       	brne	.-4      	; 0x464 <dist+0x17c>
 468:	00 c0       	rjmp	.+0      	; 0x46a <dist+0x182>
 46a:	00 00       	nop
 46c:	08 95       	ret
		_delay_ms(25);
		return;
	}
	stop();
 46e:	0e 94 ba 00 	call	0x174	; 0x174 <stop>
 472:	08 95       	ret

00000474 <main>:
}

int main(void)
{
	//_delay_ms(2000);
	initMotors();
 474:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <initMotors>
	initIO(); 
 478:	0e 94 e5 00 	call	0x1ca	; 0x1ca <initIO>
		
	while ( waitForStartSignal() == 0 );
 47c:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <waitForStartSignal>
 480:	89 2b       	or	r24, r25
 482:	e1 f3       	breq	.-8      	; 0x47c <main+0x8>
		
    while(1)
    {
		
		dist();
 484:	0e 94 74 01 	call	0x2e8	; 0x2e8 <dist>
		line();
 488:	0e 94 fe 00 	call	0x1fc	; 0x1fc <line>
		kill();
 48c:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <kill>
 490:	f9 cf       	rjmp	.-14     	; 0x484 <main+0x10>

00000492 <_exit>:
 492:	f8 94       	cli

00000494 <__stop_program>:
 494:	ff cf       	rjmp	.-2      	; 0x494 <__stop_program>
